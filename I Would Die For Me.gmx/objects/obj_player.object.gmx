<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Properties
width = 16;
height = 24;
startx = x;
starty = y;

// Speed Constants
max_fallspd = 8;
max_grindspd = 1;
fallspd_step = 0.2
jumpspd = -5;
wj_height = 3;
wj_dist = 5;

max_xspd = 2;
xspd_step = 0.2;


// Speed Variabels
xspd = 0;
yspd = 0;

// Tags
dead = false;
holdingUp = false;
grounded = false;
wallgrinding = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Set holding flag after code execution
if (keyU)
    holdingUp = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Key Checks
keyL = keyboard_check(vk_left);
keyR = keyboard_check(vk_right);
keyU = keyboard_check(vk_up);
keyD = keyboard_check(vk_down);

if (holdingUp &amp;&amp; !keyU)
    holdingUp = false;

// Spike?
if (place_meeting(x,y,obj_spike)) {
    instance_create(x,y,obj_wall);
    x = startx;
    y = starty;
}

// Gravity
if (!grounded) {
    if (wallgrinding) max_spd = max_grindspd;
    else max_spd = max_fallspd;
    if (yspd + fallspd_step &gt; max_spd)
        yspd = max_spd;
    else
        yspd += fallspd_step;    
}

// Wallgrinding
wallgrinding = (!grounded &amp;&amp; (place_meeting(x+xspd_step+1,y,obj_wall) || place_meeting(x-xspd_step,y,obj_wall)))

// Movement
if (keyU &amp;&amp; !holdingUp) {
    if (grounded) {
        yspd = jumpspd;
        grounded = false;
    }
    if (wallgrinding) {
        yspd = -wj_height;
        if (place_meeting(x+1+xspd_step,y,obj_wall))
            xspd = -wj_dist;
        else if (place_meeting(x-1-xspd_step,y,obj_wall))
            xspd = wj_dist;
        wallgrinding = false;
    }
}

if (keyL) {
    if (!place_meeting(x-xspd_step,y,obj_wall)) {
        if (xspd - xspd_step &gt;= -max_xspd)
            xspd -= xspd_step*2;
    } else
        x = floor(x);
}
if (xspd &lt; 0)
    xspd += xspd_step;

if (keyR) {
    if (!place_meeting(x+xspd_step+1,y,obj_wall)) {
        if (xspd + xspd_step &lt;= max_xspd)
            xspd += xspd_step*2;
    } else
        x = ceil(x);
}
if (xspd &gt; 0)
    xspd -= xspd_step;

// X Collision
if (xspd &lt; 0 &amp;&amp; place_meeting(x+xspd,y,obj_wall)) {
    for (i = 1; i &lt; -xspd; ++i)
        if (!place_meeting(x-1,y,obj_wall))
            x--;
    x = floor(x);
    xspd = 0;
} else if (xspd &gt; 0 &amp;&amp; place_meeting(x+xspd+1,y,obj_wall)){
    for (i = 1; i &lt; xspd; ++i)
        if (!place_meeting(x+2,y,obj_wall))
            x++;
    x = ceil(x);
    xspd = 0;
}
    
// Move Player X
x += xspd;
    
// Y Collision
if (place_meeting(x,y+yspd,obj_wall)) {
    if (yspd &gt; 0) {
        for (i = 1; i &lt; yspd; ++i)
            if (!place_meeting(x,y+1,obj_wall))
                y++;
        y = floor(y);
        grounded = true;
        wallgrinding = false;
    } else {
        for (i = 1; i &lt; -yspd; ++i)
            if (!place_meeting(x,y-1,obj_wall))
                y--;
        y = ceil(y);
    }
    yspd = 0;
}

if (grounded &amp;&amp; !place_meeting(x,y+1,obj_wall))
    grounded = false;
    
// Move Player Y
y += yspd;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

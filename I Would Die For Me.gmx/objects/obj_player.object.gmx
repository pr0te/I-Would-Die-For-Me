<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Proportions
width = 16;
height = 24;

// Speed Constants
max_fallspd = 8;
fallspd_step = 0.2
jumpspd = -5;

max_xspd = 2;
xspd_step = 0.2;


// Speed Variabels
xspd = 0;
yspd = 0;

// Collision tags
grounded = false;
leftcol = false;
rightcol = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Key Checks
keyL = keyboard_check(vk_left);
keyR = keyboard_check(vk_right);
keyU = keyboard_check(vk_up);
keyD = keyboard_check(vk_down);

// Gravity
if (!grounded) {
    if (yspd + fallspd_step &gt; max_fallspd)
        yspd = max_fallspd;
    else
        yspd += fallspd_step;    
}

// Movement
if (keyU &amp;&amp; grounded) {
    yspd = jumpspd;
    grounded = false;
}

if (keyL) {
    if (xspd - xspd_step &lt; -max_xspd)
        xspd = -max_xspd;
    else
        xspd -= xspd_step;
} else if (xspd &lt; 0)
    xspd += xspd_step;

if (keyR) {
    if (xspd + xspd_step &gt; max_xspd)
        xspd = max_xspd;
    else
        xspd += xspd_step;
} else if (xspd &gt; 0)
    xspd -= xspd_step;

// Collision Detection
if (place_meeting(x,y+yspd+0.1,obj_wall)) {
    if (yspd &gt; 0) {
        yspd = 0;
        grounded = true;
    } else
        yspd = 0;
} else
    grounded = false;

if (place_meeting(x+xspd,y,obj_wall))
    xspd = 0;
    
// Move Player
y += yspd;
x += xspd;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_dead</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_wall</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Properties
width = 16;
height = 16;

// Speed Constants
max_fallspd = 8;
fallspd_step = 0.2
max_xspd = 2;
xspd_step = 0.2;
xspd_decel = 0.95;

grounded = false;
stuck = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
if (!inPlace) {
    if ((abs(y) - 8) % 16 == 0) {
        instance_create(x,y,obj_wall);
        inPlace = true;
    } else
        y += 0.5;
}
*/

if (!stuck) {
    
    // Gravity
    if (!grounded) {
        if (yspd + fallspd_step &gt; max_fallspd)
            yspd = max_fallspd;
        else
            yspd += fallspd_step;    
    }
    
    // Decelerate
    if (xspd != 0) {
        xspd *= xspd_decel;
        if (abs(xspd) &lt; 0.4)
                xspd = 0;
    }
    
    // X Collision
    if (xspd &lt; 0 &amp;&amp; place_meeting(x+xspd,y,obj_wall)) {
        for (i = 1; i &lt; -xspd; ++i)
            if (!place_meeting(x-1,y,obj_wall)) {
                x--;
                realx = x;
            }
        xspd = 0;
    } else if (xspd &gt; 0 &amp;&amp; place_meeting(x+xspd+1,y,obj_wall)){
        for (i = 1; i &lt;= xspd; ++i)
            if (!place_meeting(x+1,y,obj_wall)) {
                x++;
                realx = x;
        }
        xspd = 0;
    }
    
    // Move Player X
    realx += xspd;
    x = round(realx);
    
    // Y Collision
    if (yspd &gt; 0) {
        if (place_meeting(x,y+yspd+1,obj_wall)) {
            for (i = 1; i &lt;= yspd; ++i)
                if (!place_meeting(x,y+1,obj_wall)) {
                    y++;
                    realy = y;
                }
            grounded = true;
            yspd = 0;
        }
    } else if (yspd &lt; 0) {
        if (place_meeting(x,y+yspd,obj_wall)) {
            for (i = 1; i &lt; -yspd; ++i)
                if (!place_meeting(x,y-1,obj_wall)) {
                    y--;
                    realy = y;
                }
            yspd = 0;
        }
    }
    
    if (grounded &amp;&amp; !place_meeting(x,y+1,obj_wall))
        grounded = false;
        
    // Move Player Y
    realy += yspd;
    y = round(realy);
    
    if (place_meeting(x,y+1,obj_spike_floor) &amp;&amp; place_meeting(x,y+1-height/2,obj_spike_floor)) {
        stuck = true;
        y -= abs(y) % 16;
    } else if (place_meeting(x,y,obj_spike_ceil) &amp;&amp; place_meeting(x,y+height/2,obj_spike_ceil)) {
        stuck = true;
        y += 16 - abs(y) % 16;
    } else if (place_meeting(x,y,obj_spike_left) &amp;&amp; place_meeting(x+width/2,y,obj_spike_left)) {
        stuck = true;
        x += 16 - abs(x) % 16;
    } else if (place_meeting(x+1,y,obj_spike_right) &amp;&amp; place_meeting(x+1-width/2,y,obj_spike_right)) {
        stuck = true;
        x -= abs(x) % 16;
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
